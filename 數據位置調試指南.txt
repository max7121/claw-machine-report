🔍 re_readdata 數據位置調試指南
======================================

## 📌 您的情況

您有數據但無法讀取。原因是：**您的機台的投幣和出獎數據位於我們目前代碼未覆蓋的位置。**

## 🎯 快速診斷步驟

### 第 1 步：收集實際的 parm 數據

從您最後一次的 re_readdata 回應中，複製 parm 值：

```
例如: "02020a2c01008001000010008201008000000000080067a8628210b00012800005800b0656"
```

### 第 2 步：打開控制台進行調試

1. 按 `F12` 打開開發者工具
2. 進入「Console」標籤
3. 執行以下代碼：

```javascript
// 您的 parm 值 (從回應中複製)
const parm = "02020a2c01008001000010008201008000000000080067a8628210b00012800005800b0656";

// 轉換為字節
const bytes = [];
for (let i = 0; i < parm.length; i += 2) {
    bytes.push(parseInt(parm.substring(i, i + 2), 16));
}

console.log('字節陣列:', bytes);
console.log('前 20 個字節(十進位):', bytes.slice(0, 20));
console.log('前 20 個字節(十六進位):', bytes.slice(0, 20).map(b => '0x' + b.toString(16).padStart(2, '0')));

// 列出所有 4 字節組合
console.log('\n=== 所有可能的 4 字節組合 ===');
for (let i = 0; i < Math.min(bytes.length - 7, 20); i++) {
    const val = bytes[i] | (bytes[i+1] << 8) | (bytes[i+2] << 16) | (bytes[i+3] << 24);
    console.log(`位置 ${i}: ${val} (0x${val.toString(16)})`);
}
```

### 第 3 步：對比您期望的數字

假設您知道機台此時應該的投幣數和出獎次數，例如：
- 投幣數應該是：1234
- 出獎次數應該是：567

### 第 4 步：在控制台輸出中尋找這些數字

查看控制台輸出，找到符合您預期的數字組合。

### 第 5 步：記下位置

當您看到：
```
位置 6: 1234
位置 10: 567
```

這表示投幣在位置 6，出獎在位置 10。

## 🔧 通常的數據位置

根據我們現在測試的多種協議，投幣和出獎通常位於：

| 位置 | 說明 | 備註 |
|------|------|------|
| 位置 2-6 | 常見 | 第一個備選位置 |
| 位置 4-8 | 常見 | 第二個備選位置 |
| 位置 10-14 | 偶爾 | 第三個備選位置 |
| 其他位置 | 罕見 | 需要自定義機台協議 |

## 📝 告訴我您的信息

請提供以下信息，這樣我可以精確調整代碼：

**1. parm 十六進位字符串樣本**
```
例如: 02020a2c01008001000010008201008000000000080067a8628210b00012800005800b0656
```

**2. 該 parm 對應的期望數字**
- 投幣遊戲次數應該是多少？(例如: 1234)
- 禮品出獎次數應該是多少？(例如: 567)

**3. 您也可以提供多個樣本**
```
樣本 1:
  parm: "..."
  投幣: 1234
  出獎: 567

樣本 2:
  parm: "..."
  投幣: 5678
  出獎: 901
```

## 🚀 臨時解決方案

如果您想自己調整，可以修改 `parseReReadData` 函數中的提取邏輯：

### 例如：如果數據位於位置 6 和 10

打開 HTML 文件，找到以下代碼：

```javascript
// 方法 3: 字節 10-14 為投幣，14-18 為出獎
if (bytes.length >= 18) {
    const plays3 = bytes[10] | (bytes[11] << 8) | (bytes[12] << 16) | (bytes[13] << 24);
    const payouts3 = bytes[14] | (bytes[15] << 8) | (bytes[16] << 16) | (bytes[17] << 24);
```

改為：

```javascript
// 您的自定義位置: 位置 6 和 10
if (bytes.length >= 14) {
    const plays3 = bytes[6] | (bytes[7] << 8) | (bytes[8] << 16) | (bytes[9] << 24);
    const payouts3 = bytes[10] | (bytes[11] << 8) | (bytes[12] << 16) | (bytes[13] << 24);
```

## 💡 高級提示

### 查看詳細日誌

系統已經改進為提供詳細的調試日誌。當您測試時，在控制台會看到：

```
⚙️ 解析 re_readdata 協議數據...
📝 parm 十六進位字符串: 02020a2c01008001...
📊 parm 字符串長度: 128 字符 (64 字節)
🔍 前 20 個字節值: 0x2, 0x2, 0xa, 0x2c, 0x1, 0x0, 0x88, 0x1, ...
試 1: plays=11778, payouts=256
試 2: plays=256, payouts=4113
試 3: plays=32768, payouts=0
🔎 開始動態掃描所有位置...
✅ 方法 4 成功 (位置 6): plays=1234, payouts=567
```

這告訴您確切的位置！

### 理解 Little-Endian 格式

我們的代碼使用 Little-Endian 格式讀取 4 字節數據：

```javascript
// 位置 i 的 4 字節組合
const value = bytes[i] | (bytes[i+1] << 8) | (bytes[i+2] << 16) | (bytes[i+3] << 24);

// 例如字節 [0x2C, 0x0A, 0x00, 0x00] 代表:
// = 0x2C | (0x0A << 8) | (0x00 << 16) | (0x00 << 24)
// = 0x0A2C = 2604 (十進位)
```

## 🎯 檢查清單

在提供信息時，請確保：

- ☐ 提供了完整的 parm 十六進位字符串
- ☐ 您知道該 parm 對應的真實投幣和出獎數字
- ☐ 檢查了控制台的調試日誌
- ☐ 嘗試了所有 5 種提取方法

## 📞 下一步

1. **立即測試**：刷新頁面，再次點擊「測試 HTTP 連線」
2. **查看日誌**：按 F12 查看控制台輸出
3. **提供反饋**：告訴我您看到的數字和期望的數字
4. **我來調整**：我會修改代碼以匹配您的機台協議

---

✅ 系統已準備好處理各種數據格式！

讓我們找出您機台的數據位置吧！ 🔍
