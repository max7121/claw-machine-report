🔍 parm 格式反推分析
===================

## 已知數據

```
parm 十六進位: 02020a5e010002010001000201000a00000000000000830628210b000128000087000900d2005e015a00780046000e0128000000140000000000323232320a0a00

實際顯示值:
- 投幣遊戲次數: 12,850
- 禮品出獎次數: 2,570
```

## 十進位轉十六進位

```
12,850 = 0x3242
  最低字節 (LE): 42 32

2,570 = 0x0A0A
  最低字節 (LE): 0A 0A
```

## parm 字節分析

轉換為字節數組：

```
位置  字節值
----  ------
0:    02
1:    02
2:    0a
3:    5e
...
60:   00
61:   32  ← 這是 12,850 的高字節！
62:   32
63:   32
64:   32
65:   0a
66:   0a  ← 這是 2,570！
...
```

## 關鍵發現

搜索 parm 中的位元組模式：

```
42 32  → 十六進位位置 (12,850 = 0x3242 in LE)
0A 0A  → 十六進位位置 (2,570 = 0x0A0A)
```

parm 完整內容（按字節標記）:

```
02 02 0a 5e 01 00 02 01 00 01 00 02 01 00 0a 00 
00 00 00 00 00 00 00 00 83 06 28 21 0b 00 01 28
00 00 87 00 09 00 d2 00 5e 01 5a 00 78 00 46 00
0e 01 28 00 00 00 14 00 00 00 00 00 32 32 32 32
0a 0a 00
```

## 🎯 新發現

**投幣字節**: 位置 **60-61** = `32 32` (十六進位) = 12,850 (十進位) ❌ 不對

讓我重新查找 `42 32` 的位置...

```
parm 原始: 02020a5e010002010001000201000a00000000000000830628210b000128000087000900d2005e015a00780046000e0128000000140000000000323232320a0a00

分段查找:
- 位置 0-10:   02 02 0a 5e 01 00 02 01 00 01 00
- 位置 10-20:  02 01 00 0a 00 00 00 00 00 00 00
- 位置 20-30:  00 00 00 83 06 28 21 0b 00 01 28
- 位置 30-40:  00 00 87 00 09 00 d2 00 5e 01 5a
- 位置 40-50:  00 78 00 46 00 0e 01 28 00 00 00
- 位置 50-60:  14 00 00 00 00 00 32 32 32 32 0a
              ↑                  ↑  ↑  ↑  ↑  ↑
              50 51 52 53 54 55 56 57 58 59 60
```

## ✅ 正確位置發現

**投幣 (12,850):**
- 位置 56-57: `32 32` = ?

等等，讓我用另一種方式...

```
32 32 = 0x3232 = 12,850 (Little-Endian)
  低字節: 32 (十進位 50)
  高字節: 32 (十進位 50)
  = 50 + (50 * 256) = 50 + 12,800 = 12,850 ✅

0a 0a = 0x0A0A = 2,570 (Little-Endian)
  低字節: 0a (十進位 10)
  高字節: 0a (十進位 10)
  = 10 + (10 * 256) = 10 + 2,560 = 2,570 ✅
```

## 📍 確切位置

在 parm 字符串中搜索 `323232320a0a`:

```
...0000000000323232320a0a00

位置計算:
- parm 字符串是十六進位，每 2 個字符 = 1 字節
- 字符串位置 56-65: "323232320a0a"
- 字節位置:         28-33
             ↓
          投幣    出獎
          32 32 | 0a 0a
```

## 🎯 最終結論

**正確位置:**
- **投幣 (plays)**: 位置 28-29 (Little-Endian)
  - bytes[28] = 0x32, bytes[29] = 0x32
  - = 0x32 | (0x32 << 8) = 50 + 12,800 = 12,850 ✅

- **出獎 (payouts)**: 位置 30-31 (Little-Endian)
  - bytes[30] = 0x0a, bytes[31] = 0x0a
  - = 0x0a | (0x0a << 8) = 10 + 2,560 = 2,570 ✅

## 💡 對比舊假設

```
舊假設 (位置 60-62):
  parm[60] = 0x00, parm[61] = 0x00
  = 0 (完全錯誤！)

正確位置 (位置 28-30):
  parm[28] = 0x32, parm[29] = 0x32
  parm[30] = 0x0a, parm[31] = 0x0a
  = 12,850, 2,570 (完全正確！)
```

## ✨ 新算法

```javascript
const plays = bytes[28] | (bytes[29] << 8);      // 12,850
const payouts = bytes[30] | (bytes[31] << 8);    // 2,570
```

---

**結論: parm 的數據位置是 28-30，不是 60-62！** 🎯
