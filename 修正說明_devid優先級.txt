==== 🔧 系統數據取用邏輯修正說明 ====

【問題根源】
❌ 之前的 handleHttpResponse() 在接收到陣列數據時，會自動提取所有 devid
❌ 這導致即使傳入指定的 devid，系統也會為每個 devid 都解析一次
❌ 順序可能混亂，導致取到舊的 parm 而不是新的

【修正方案】
✅ 現在優先檢查是否有指定的 devid 參數
✅ 如果指定了 devid (例如 devid=1)，就只解析該 devid 的數據
✅ 只在沒指定 devid 時才自動探測所有 devid

【關鍵改變】

原邏輯:
├─ 收到陣列 → 自動提取所有 devid
├─ 為每個 devid 調用 parseHttpData()
└─ 可能导致顺序混乱

新邏輯:
├─ 收到陣列 + 指定 devid (1)
├─ ✅ 直接調用 parseHttpData(data, 1) 一次
├─ parseHttpData 倒序查找最新的 devid=1 數據
└─ 返回正確的最新 parm

【調用流程】
1. pollSingleMachine(mac, devid=1)
   ↓
2. handleHttpResponse(result, mac, devid=1)  ← devid 明確傳入
   ↓
3. Array.isArray(data) ✅ true
   devid !== null ✅ devid=1
   ↓
4. parseHttpData(data, 1)  ← 只查找 devid=1
   ↓
5. 倒序遍歷找最新的 devid=1 記錄 (2025-10-23 09:48:11)
   ↓
6. ✅ 返回新 parm (0x87 0x00 0x09 0x00)

【Console 日誌會顯示】
📊 檢測到陣列數據，處理多 devid... (指定DevID: 1)
⭐ 優先解析指定的 devid: 1
📋 發現所有 re_readdata 記錄:
   [1] 2025-10-23 09:48:11.277 (devid=1)  ← ✅ 新的
   [94] 2025-10-20 13:27:59.182 (devid=1)  ← 舊的
✅ 找到目標 devid 1 的最新 re_readdata 命令 (索引 1, 時間: 2025-10-23 09:48:11.277)
✅ devid 1 數據已儲存: {plays: 135, payouts: 9, ...}

【預期結果】
現在系統會正確顯示:
- 投幣數: 135 (新值) ✅
- 出貨次數: 9 (新值) ✅
