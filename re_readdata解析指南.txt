🔧 re_readdata 十六進位數據解析指南
=====================================

## 📋 功能說明

現在系統可以智能識別和解析 re_readdata 命令中的十六進位數據！

### ✅ 支持的格式

當伺服器返回以下格式時，系統會自動解析：

```json
{
  "cmd": "re_readdata",
  "mac": "083A8DE1ED14",
  "floor": 1,
  "devid": 1,
  "parm": "02021ede03020001000100000000170000030000000008071e2c1100012d000060046e00140000006e005a0000000401000040015a006400000032323232643200",
  "taskid": "20250905140326168"
}
```

## 🎯 工作流程

```
伺服器回應 (包含 parm 十六進位字段)
    ↓
系統檢測到 cmd="re_readdata"
    ↓
調用 parseReReadData() 函數
    ↓
將十六進位字符串轉換為字節陣列
    ↓
嘗試 3 種位置提取方法
    ↓
方法 1 ✅ 找到有效數據 → 立即返回
方法 2 ✅ 找到有效數據 → 立即返回
方法 3 ✅ 找到有效數據 → 立即返回
    ↓
都失敗 → 顯示「無資訊更新」
```

## 📊 數據位置提取方法

系統按照以下優先級自動嘗試提取投幣和出獎計數：

### 方法 1: 標準位置 (最常見)
- 投幣計數: 字節 4-8 (Little-Endian 32位)
- 出獎計數: 字節 8-12 (Little-Endian 32位)
- 用途: 大多數機台協議使用此位置

### 方法 2: 備用位置
- 投幣計數: 字節 2-6 (Little-Endian 32位)
- 出獎計數: 字節 6-10 (Little-Endian 32位)
- 用途: 某些變體協議

### 方法 3: 動態掃描
- 逐位置掃描整個 parm 字段
- 找出任何可能的有效數值對
- 用途: 非標準的自定義協議

## 🎨 UI 顯示狀態

### ✅ 成功提取數據
```
📊 機台數據解析結果

┌─────────────────────────────┐
│ ✅ 投幣遊戲次數              │
│      12,345                 │
└─────────────────────────────┘

┌─────────────────────────────┐
│ ✅ 禮品出獎次數              │
│       6,789                 │
└─────────────────────────────┘

格式: re_readdata | 時間: 14:30:45
```

### ⚠️ 無資訊更新 (re_readdata 但無有效數據)
```
📊 機台數據解析結果

┌─────────────────────────────┐
│ ⚠️ 無資訊更新                │
│ 無法從伺服器回應中解析有效    │
│ 的投幣或出獎數據              │
│                             │
│ 命令: re_readdata            │
│ MAC: 083A8DE1ED14            │
│ 格式: re_readdata | 時間...  │
└─────────────────────────────┘
```

### ❌ 無法識別數據 (其他格式無有效數據)
```
📊 機台數據解析結果

┌─────────────────────────────┐
│ ⚠️ 無法識別數據              │
│ 無法從伺服器回應中提取投幣    │
│ 或出獎信息                   │
│                             │
│ 格式: json | 時間: 14:30:45  │
└─────────────────────────────┘
```

## 🔍 控制台日誌 (按 F12 查看)

### 成功情況
```
⚙️ 解析 re_readdata 協議數據...
📝 parm 十六進位字符串: 02021ede03020001...
📊 總字節數: 132
✅ 方法 1 成功: plays=12345, payouts=6789
✅ UI 已成功更新 - 投幣數: 12345, 出獎數: 6789
```

### 失敗情況
```
⚙️ 解析 re_readdata 協議數據...
📝 parm 十六進位字符串: 00000000000000...
📊 總字節數: 132
⚠️ 無法從 parm 中提取有效數據
⚠️ 無法提取有效的數據
```

## 🧪 測試方法

### 方法 A: 使用控制台測試
```javascript
// 在瀏覽器 F12 → Console 中執行:

// 測試有有效數據的 re_readdata
handleHttpResponse({
    "cmd": "re_readdata",
    "mac": "083A8DE1ED14",
    "floor": 1,
    "devid": 1,
    "parm": "02021ede03020001000100000000170000030000000008071e2c1100012d000060046e00140000006e005a0000000401000040015a006400000032323232643200",
    "taskid": "20250905140326168"
});

// 預期: UI 中會顯示投幣數和出獎次數
```

### 方法 B: 使用測試按鈕
1. 點擊「🔗 測試 HTTP 連線」按鈕
2. 如果伺服器返回 re_readdata 數據，系統會自動解析
3. 查看 UI 中是否出現投幣和出獎信息

### 方法 C: 啟用自動輪詢
1. 選擇輪詢間隔 (例如: 10秒)
2. 勾選「啟用自動輪詢所有機台」
3. 每隔 10 秒系統自動請求數據並解析

## 💡 常見情況

### 情況 1: 看到「無資訊更新」
✅ 這是正常的！表示：
- 系統成功識別了 re_readdata 命令
- 但無法從 parm 字段中提取有效的投幣或出獎數據
- 可能是您的機台協議使用了不同的數據位置

📝 解決方案:
- 請提供實際的 parm 十六進位字符串樣本
- 告訴我投幣數應該是多少
- 我可以調整提取位置

### 情況 2: 看到「無法識別數據」
⚠️ 表示伺服器返回的格式不是預期的格式

📝 檢查:
- 檢查伺服器是否返回了 re_readdata 命令
- 查看控制台日誌了解詳情

### 情況 3: 看到有效的數字但可能不正確
⚠️ 提取的位置可能需要調整

📝 調試步驟:
1. 記下提取的數字
2. 記下您期望的數字
3. 告訴我差異
4. 我可以調整提取算法

## 🔧 高級配置

### 如果需要自定義提取位置

打開控制台，修改 parseReReadData 函數中的位置：

```javascript
// 範例: 如果投幣在位置 10-14，出獎在 14-18
const plays = (bytes[13] << 24) | (bytes[12] << 16) | (bytes[11] << 8) | bytes[10];
const payouts = (bytes[17] << 24) | (bytes[16] << 16) | (bytes[15] << 8) | bytes[14];
```

## 📞 故障排查

| 問題 | 原因 | 解決方案 |
|------|------|---------|
| 總是顯示「無資訊更新」 | parm 格式與預期不符 | 提供實際的 parm 樣本 |
| 數字看起來不對 | 提取位置錯誤 | 告訴我期望的數字 |
| 系統沒有解析 | 可能不是 re_readdata 命令 | 查看控制台確認 |
| 部分數據缺失 | 方法 1-3 都失敗 | 需要調整算法 |

## 📝 數據驗證規則

系統在提取數據時會檢查以下條件：

```
✅ 投幣數: 1 < 值 < 1,000,000
✅ 出獎數: 0 ≤ 值 < 1,000,000
```

如果數據不符合這些範圍，會被視為無效並嘗試其他位置。

## 🎯 下一步

1. 🔄 測試您的實際 re_readdata 數據
2. 📊 查看 UI 是否正確顯示投幣和出獎
3. 📋 如果有問題，提供：
   - 實際的 parm 十六進位字符串
   - 期望的投幣數
   - 期望的出獎數

這樣我可以精確調整提取算法！

---

✅ 系統已準備好處理 re_readdata 數據！

開始測試吧 🚀
