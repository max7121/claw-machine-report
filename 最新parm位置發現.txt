✅ 最新 parm 分析 (2025-10-23 09:48:11)
======================================

## 最新 devid=1 parm
```
02020a5e010002010001000201000a00000000000000830628210b000128000087000900d2005e015a00780046000e0128000000140000000000323232320a0a00
```

## 轉換為字節陣列

```
位置  16進  10進  | 位置  16進  10進
----  ----  ----  | ----  ----  ----
0:    02    2     | 32:   87    135 ⭐ 投幣！
1:    02    2     | 33:   00    0
2:    0a    10    | 34:   09    9   ⭐ 出獎！
3:    5e    94    | 35:   00    0
4:    01    1     | 36:   d2    210
5:    00    0     | 37:   00    0
6:    02    2     | 38:   5e    94
7:    01    1     | 39:   01    1
8:    00    0     | 40:   5a    90
9:    01    1     | 41:   00    0
10:   00    0     | 42:   78    120
11:   02    2     | 43:   00    0
12:   01    1     | 44:   46    70
13:   00    0     | 45:   00    0
14:   0a    10    | 46:   0e    14
15:   00    0     | 47:   01    1
16:   00    0     | 48:   28    40
17:   00    0     | 49:   00    0
18:   00    0     | 50:   00    0
19:   00    0     | 51:   00    0
20:   00    0     | 52:   14    20
21:   00    0     | 53:   00    0
22:   83    131   | 54:   00    0
23:   06    6     | 55:   00    0
24:   28    40    | 56:   00    0
25:   21    33    | 57:   32    50
26:   0b    11    | 58:   32    50
27:   00    0     | 59:   32    50
28:   01    1     | 60:   32    50
29:   28    40    | 61:   0a    10
30:   00    0     | 62:   0a    10
31:   00    0     | 63:   00    0
```

## 🎯 找到了！

```
位置 32-33: 87 00 = 135 (投幣) ✅
位置 34-35: 09 00 = 9 (出獎) ✅
```

## ✨ 正確公式

```javascript
const plays = bytes[32] | (bytes[33] << 8);    // 0x87 | 0 = 135
const payouts = bytes[34] | (bytes[35] << 8);  // 0x09 | 0 = 9
```

---

**問題找到了：**
- 舊代碼用的是位置 42-45
- 但正確位置是 **位置 32-35**！
- 位移了 10 位！

不同的 parm 版本位置不同，需要支援多個位置的備用機制！
