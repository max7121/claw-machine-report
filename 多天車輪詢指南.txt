🎯 多天車機台輪詢指南
==================

## 📋 功能說明

系統現在支持 **多個天車機台的智能輪詢**：

- ✅ **devid 識別** - 自動識別左天車 (ID:1) 和右天車 (ID:2)
- ✅ **獨立輪詢** - 為每個機台單獨進行 HTTP 輪詢
- ✅ **獨立存儲** - 每個 devid 的最新數據單獨保存
- ✅ **獨立顯示** - 在 UI 上分別顯示每個天車的數據
- ✅ **最新數據** - 自動從回應中提取最新的 re_readdata 數據

## 🏗️ 數據結構

### 存儲位置

系統在全域範圍內使用以下變數存儲多天車數據：

```javascript
// 單個 devid 的數據
window.machineDataByDevid = {
    1: {
        plays: 296,              // 左天車的投幣數
        payouts: 87,             // 左天車的出獎次數
        timestamp: "14:30:45",
        format: "re_readdata",
        devid: 1
    },
    2: {
        plays: 450,              // 右天車的投幣數
        payouts: 120,            // 右天車的出獎次數
        timestamp: "14:30:45",
        format: "re_readdata",
        devid: 2
    }
}
```

## 🚀 工作流程

### 輪詢時的自動處理

```
1️⃣ 點擊「啟用自動輪詢所有機台」或「測試 HTTP 連線」
   ↓
2️⃣ 系統逐個查詢每個機台的 MAC 地址
   ↓
3️⃣ 伺服器返回包含多個 re_readdata 命令的陣列
   ↓
4️⃣ 系統自動檢測陣列中所有的 devid
   ↓
5️⃣ 為每個 devid 提取最新的數據
   ↓
6️⃣ 按 devid 分別儲存數據
   ↓
7️⃣ 在 UI 上分別顯示每個天車的投幣和出獎數據
```

## 📊 UI 顯示

### 單個天車數據卡片

當輪詢成功時，頁面會顯示：

```
左天車數據解析結果

┌─────────────────────────────┐
│ ✅ 投幣遊戲次數              │
│       296                   │
└─────────────────────────────┘

┌─────────────────────────────┐
│ ✅ 禮品出獎次數              │
│        87                   │
└─────────────────────────────┘

格式: re_readdata | 時間: 14:30:45


右天車數據解析結果

┌─────────────────────────────┐
│ ✅ 投幣遊戲次數              │
│       450                   │
└─────────────────────────────┘

┌─────────────────────────────┐
│ ✅ 禮品出獎次數              │
│       120                   │
└─────────────────────────────┘

格式: re_readdata | 時間: 14:30:45
```

## 🔍 控制台日誌

### 輪詢過程中的日誌輸出

```
📊 檢測到陣列數據，處理多 devid...
🔍 找到的 devid: [1, 2]
✅ devid 1 數據已儲存: {plays: 296, payouts: 87, ...}
💾 devid 1 數據已保存
✅ devid 2 數據已儲存: {plays: 450, payouts: 120, ...}
💾 devid 2 數據已保存
```

## 💾 數據訪問

### 在 JavaScript 中訪問數據

```javascript
// 訪問所有機台的數據
console.log(window.machineDataByDevid);
// 輸出: {1: {...}, 2: {...}}

// 訪問特定機台的數據
const leftMachineData = window.machineDataByDevid[1];
console.log(leftMachineData.plays);   // 296

const rightMachineData = window.machineDataByDevid[2];
console.log(rightMachineData.payouts); // 120

// 計算合計
const totalPlays = (window.machineDataByDevid[1]?.plays || 0) + 
                   (window.machineDataByDevid[2]?.plays || 0);
console.log('總投幣數:', totalPlays);  // 746

const totalPayouts = (window.machineDataByDevid[1]?.payouts || 0) + 
                     (window.machineDataByDevid[2]?.payouts || 0);
console.log('總出獎次數:', totalPayouts);  // 207
```

## 🎛️ 機台配置

### 在「建立新機台」中設置

當您建立新機台時，需要配置 devid：

| 字段 | 值 | 說明 |
|------|-----|------|
| 機台編號 | A01 | 您自定義的名稱 |
| 位置/內容物 | 左天車/大娃娃 | 機台的位置 |
| 機台 MAC 位址 | 083A8DE1ED14 | 機台的硬體位址 |
| **設備 ID (MQTT)** | **1** 或 **2** | ⭐ **1=左天車, 2=右天車** |

### 例子

```
機台 1:
  名稱: 左天車
  MAC: 083A8DE1ED14
  DevID: 1  ← 左天車

機台 2:
  名稱: 右天車
  MAC: 083AF2C1B56D
  DevID: 2  ← 右天車
```

## 🧪 測試方法

### 方法 1: 單機台測試

1. 點擊某個機台的「查詢」按鈕
2. 系統發送請求，自動提取該 devid 的最新數據
3. 在 UI 上看到相應的數據卡片

### 方法 2: 批量輪詢測試

1. 點擊「啟用自動輪詢所有機台」
2. 系統逐個查詢所有配置的機台
3. 在 UI 上看到所有天車的數據卡片

### 方法 3: 控制台驗證

按 F12 打開控制台，執行：

```javascript
// 查看所有機台的最新數據
console.log('所有天車數據:', window.machineDataByDevid);

// 查看左天車數據
console.log('左天車投幣:', window.machineDataByDevid[1]?.plays);
console.log('左天車出獎:', window.machineDataByDevid[1]?.payouts);

// 查看右天車數據
console.log('右天車投幣:', window.machineDataByDevid[2]?.plays);
console.log('右天車出獎:', window.machineDataByDevid[2]?.payouts);

// 計算總數
if (window.machineDataByDevid[1] && window.machineDataByDevid[2]) {
    const totalPlays = window.machineDataByDevid[1].plays + window.machineDataByDevid[2].plays;
    const totalPayouts = window.machineDataByDevid[1].payouts + window.machineDataByDevid[2].payouts;
    console.log('總計:', {投幣: totalPlays, 出獎: totalPayouts});
}
```

## 🔄 輪詢過程詳解

### 調用堆棧

```
pollAllMachines()
    ↓ (為每個機台)
pollSingleMachine(mac, devid)
    ↓
sendHttpRequest(mac)
    ↓
伺服器返回 JSON 陣列
    ↓
handleHttpResponse(data, mac, devid)
    ↓ (如果是陣列)
檢測所有 devid
    ↓
for each devid:
    parseHttpData(data, targetDevid)
        ↓
    查找該 devid 最新的 re_readdata
        ↓
    window.machineDataByDevid[devid] = 解析結果
    updateMachineDataDisplay(data, devid)
        ↓
    在 UI 上顯示該 devid 的數據
```

## 📝 關鍵改進

| 改進 | 之前 | 之後 |
|------|------|------|
| 多 devid 支持 | ❌ 無 | ✅ 自動識別 |
| 數據隔離 | ❌ 全局混亂 | ✅ 按 devid 分離 |
| UI 顯示 | ❌ 單個容器 | ✅ 每個 devid 獨立容器 |
| 最新數據查找 | ❌ 第一條 | ✅ 最新一條 |
| 數據訪問 | ❌ 困難 | ✅ 易用的全域變數 |

## 🎯 常見使用場景

### 場景 1: 查詢單個天車的投幣數

```javascript
// 在控制台中執行
const leftCoins = window.machineDataByDevid[1]?.plays || 0;
console.log('左天車投幣數:', leftCoins);
```

### 場景 2: 比較兩個天車的出獎率

```javascript
const left = window.machineDataByDevid[1];
const right = window.machineDataByDevid[2];

if (left && right) {
    const leftRate = (left.payouts / left.plays * 100).toFixed(2);
    const rightRate = (right.payouts / right.plays * 100).toFixed(2);
    console.log(`左天車出獎率: ${leftRate}%`);
    console.log(`右天車出獎率: ${rightRate}%`);
}
```

### 場景 3: 監控兩台機台的實時變化

```javascript
// 定期檢查變化
const prevData = {...window.machineDataByDevid};

// ... 進行輪詢 ...

// 檢查是否有新數據
if (window.machineDataByDevid[1]?.plays !== prevData[1]?.plays) {
    console.log('⚡ 左天車投幣數變化了!');
}
```

## ✨ 特色功能

### 自動 devid 檢測

系統會自動掃描回應中的所有 devid，不需要手動配置：

```
检测到的 devid: [1, 2, 3]
↓
自動為每個 devid 創建存儲空間
↓
自動為每個 devid 創建 UI 容器
```

### 智能最新數據提取

即使返回多條相同 devid 的記錄，系統也會自動選擇最新的一條：

```
devid=1 的記錄:
  [時間舊] re_readdata #1
  [時間舊] re_readdata #2
  [時間新] re_readdata #3 ← 選擇這個
↓
使用 re_readdata #3 的數據
```

## 🔧 進階配置

### 添加新的 devid 標籤

如果您有第三個天車 (devid=3)，編輯代碼在 updateMachineDataDisplay 中添加：

```javascript
const displayLabel = devid ? `天車 ${
    devid === 1 ? '左' : 
    devid === 2 ? '右' : 
    devid === 3 ? '中' :  // ← 新增
    devid
}` : '機台';
```

## ✅ 檢查清單

測試時確保：

- ☐ 每個機台都配置了不同的 devid (1, 2 等)
- ☐ 點擊輪詢後，控制台顯示找到的所有 devid
- ☐ 每個 devid 都有獨立的 UI 卡片顯示
- ☐ `window.machineDataByDevid` 包含所有 devid 的數據
- ☐ 數據隨著時間自動更新

---

## 🚀 立即開始

1. **配置機台** - 為左右天車分別設置 devid 1 和 2
2. **啟動輪詢** - 點擊「啟用自動輪詢所有機台」
3. **查看結果** - 在 UI 上看到兩個天車的獨立數據卡片
4. **驗證數據** - 在控制台檢查 `window.machineDataByDevid`

完成！您的多天車監控系統已準備好 🎉
