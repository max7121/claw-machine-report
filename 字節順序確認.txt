✅ 正確的高低位分析
===================

## 實際數據

字節序列: `00 87 00 09`

## 十進位轉換

```
00 87 = 0x0087 = 135
00 09 = 0x0009 = 9
```

但截圖顯示: **350 和 90**

## 🔍 反推正確位置

```
350 = 0x015E
  Big-Endian: 01 5E
  Little-Endian: 5E 01

90 = 0x005A
  Big-Endian: 00 5A
  Little-Endian: 5A 00
```

在完整 parm 中找 `01 5E` 和 `5A 00`。

## 可能的解釋

字節序列 `00 87 00 09` 可能代表：

**方案1：搭配前一個字節**
```
如果前面是 01 5E:
  01 5E 00 87 00 09
  
則:
  01 5E = 350 (Big-Endian or Little-Endian 5E 01)
  00 09 = 9
```

**方案2：或後面的字節**
```
如果 00 87 00 09 前面有其他字節
```

---

## ✅ 立即修正方案

假設 `00 87 00 09` 是完整的值，但應該讀作：
- 前 2 字節 (00 87) 的組合
- 後 2 字節 (00 09) 的組合

**可能的公式：**

```javascript
// 方案 1: Big-Endian
const plays = (bytes[?] << 8) | bytes[?+1];
const payouts = (bytes[?+2] << 8) | bytes[?+3];

// 方案 2: 混合
const plays = bytes[?] | (bytes[?+1] << 8);
const payouts = bytes[?+2] | (bytes[?+3] << 8);
```

---

**請告訴我:**

根據新的 parm，`00 87 00 09` 在哪個位置？

然後我知道應該用：
- Big-Endian: `(bytes[i] << 8) | bytes[i+1]` ？
- Little-Endian: `bytes[i] | (bytes[i+1] << 8)` ？

哪一個應該給出 350 和 90？
