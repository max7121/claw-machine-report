✅ 字節順序確認（最終）
=======================

## 樣本 2: devid=2 parm

```
02020a5e010002010001000201000a00000000000000890628210b00012800004a0007005a005a005a00180178000a000a000000000000000000323232320a0a00
```

## 十六進位轉十進位

```
位置 42-43 (C2 投幣):
  位置 42: 0x18 (十進位 24)
  位置 43: 0x01 (十進位 1)
  
  Low-High (Little-Endian): 0x18 | (0x01 << 8) = 24 + 256 = 280 ✅

位置 44-45 (C3 出獎):
  位置 44: 0x78 (十進位 120)
  位置 45: 0x00 (十進位 0)
  
  Low-High (Little-Endian): 0x78 | (0x00 << 8) = 120 + 0 = 120 ✅
```

## 問題發現

前面的計算用的是：
```javascript
const plays = bytes[42] | (bytes[43] << 8);
const payouts = bytes[44] | (bytes[45] << 8);
```

這對樣本 2 完全正確！但為什麼 UI 顯示錯誤？

## 🔍 檢查 parm 在 devid=2 中的確切位置

完整 parm (devid=2):
```
02020a5e010002010001000201000a00000000000000890628210b00012800004a0007005a005a005a00180178000a000a000000000000000000323232320a0a00

字節計數:
位置 40-41: 00 00
位置 42-43: 4a 00  ← 這不是 18 01！
位置 44-45: 07 00
位置 46-47: 00 5a
位置 48-49: 5a 5a
位置 50-51: 5a 00
位置 52-53: 18 01  ← 這才是 280！
位置 54-55: 78 00  ← 這才是 120！
```

## 🎯 真相大白！

**devid=2 的位置是 52-55，不是 42-45！**

## 對比兩組數據

```
devid=1 (位置 42-45):
  parm[42-45] = 87 00 09 00
  = 135, 9 ✅

devid=2 (位置 52-55):
  parm[52-55] = 18 01 78 00
  = 280, 120 ✅
```

## 💡 可能的規律

位置偏移 10 字節？

```
devid=1: 位置 42-45
devid=2: 位置 42+10=52 ~ 55
```

或者需要檢查是否有其他 parm 結構差異...

**需要確認:**
- devid=1 的 parm 實際位置是 42-45 嗎？
- devid=2 的 parm 位置是 52-55 嗎？
- 還是兩者都有其他位置？
